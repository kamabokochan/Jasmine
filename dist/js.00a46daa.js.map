{"version":3,"sources":["js/index.js"],"names":["MMD_SETTING","constructor","init","scene","THREE","Scene","setLight","setDisplay","setCamera","bindEvent","LoadPMX","Render","document","body","appendChild","renderer","domElement","ambient","AmbientLight","add","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","camera","PerspectiveCamera","position","set","controls","OrbitControls","enableDamping","dampingFactor","tick","update","render","requestAnimationFrame","addEventListener","onWindowResize","aspect","updateProjectionMatrix","models","path","stage","modelFile","loader","MMDLoader","Promise","resolve","load","object","mesh","y","onProgress","onError","xhr","lengthComputable","percentComplete","loaded","total","console","log","Math","round","clear"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"../src","sourcesContent":["class MMD_SETTING {\n  constructor() {\n    this.init();\n  }\n\n  async init() {\n    // シーンの作成\n    this.scene = new THREE.Scene();\n    this.setLight();\n    this.setDisplay();\n    this.setCamera();\n    this.bindEvent();\n    await this.LoadPMX();\n    this.Render();\n    // documentにMMDをセットする\n    document.body.appendChild(this.renderer.domElement);\n  }\n\n  setLight() {\n    // 光の作成\n    const ambient = new THREE.AmbientLight(0xeeeeee);\n    this.scene.add(ambient);\n  }\n\n  setDisplay() {\n    // 画面表示の設定\n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setClearColor(0xcccccc, 0);\n  }\n\n  setCamera() {\n    // カメラを作成 (視野角, 画面のアスペクト比, カメラに映る最短距離, カメラに映る最遠距離)\n    this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n    this.camera.position.set(0, 10, 50);\n\n    // カメラコントローラーを作成\n    const controls = new THREE.OrbitControls(this.camera);\n\n    // 滑らかにカメラコントローラーを制御する\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.2;\n\n    // 毎フレーム時に実行されるループイベントです\n    const tick = () => {\n      // カメラコントローラーを更新\n      controls.update();\n\n      // レンダリング\n      this.renderer.render(this.scene, this.camera);\n\n      requestAnimationFrame(tick);\n    }\n\n    tick();\n  }\n\n  bindEvent() {\n    window.addEventListener('resize', () => this.onWindowResize());\n  }\n\n  onWindowResize() {\n    // https://ics.media/tutorial-three/renderer_resize/\n    // レンダラーのサイズを調整する\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    // カメラのアスペクト比を正す\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n  }\n\n  LoadPMX() {\n    // モデルとモーションの読み込み準備\n    const models = [\n      {\n        path: \"./static/pmx/zenitsu/zenitsu_taifuku.pmx\"\n      },\n      {\n        path: \"./static/pmx/zenitsu/zenitsu_haori.pmx\"\n      }\n    ]\n\n    const stage = './static/pmx/wasitsu/円窓ステージ.pmx';\n    var modelFile = models[1].path;\n    const loader = new THREE.MMDLoader();\n\n    return new Promise(resolve => {\n      loader.load(modelFile, (object) => {\n        this.mesh = object;\n        loader.load(stage, (object) => {\n          this.mesh.position.y = -10;\n          object.position.y = -10;\n          this.scene.add(this.mesh);\n          this.scene.add(object);\n          resolve(true);\n        }, this.onProgress, this.onError);\n      }, this.onProgress, this.onError);\n    });\n  }\n\n  onProgress(xhr) {\n    if (xhr.lengthComputable) {\n      const percentComplete = xhr.loaded / xhr.total * 100;\n      console.log(Math.round(percentComplete, 2) + '% downloaded');\n    }\n  }\n\n  onError(xhr) {\n    console.log(\"ERROR\");\n  }\n\n  Render() {\n    // requestAnimationFrame(this.Render);\n    this.renderer.clear();\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nnew MMD_SETTING();"]}